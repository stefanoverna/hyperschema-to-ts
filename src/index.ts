import parser from '@apidevtools/json-schema-ref-parser'
import fetch, {RequestInfo} from 'node-fetch'
import {merge} from 'lodash'
import {Options as PrettierOptions} from 'prettier'
import {format} from './formatter'
import {generate} from './generator'
import {normalize} from './normalizer'
import {optimize} from './optimizer'
import {parse} from './parser'
import {error} from './utils'
import {validate} from './validator'

export {EnumJSONSchema, JSONSchema, NamedEnumJSONSchema, CustomTypeJSONSchema} from './types/JSONSchema'

export interface Options {
  /**
   * Disclaimer comment prepended to the top of each generated file.
   */
  bannerComment: string
  /**
   * Declare external schemas referenced via `$ref`?
   */
  declareExternallyReferenced: boolean
  /**
   * Prepend enums with [`const`](https://www.typescriptlang.org/docs/handbook/enums.html#computed-and-constant-members)?
   */
  enableConstEnums: boolean
  /**
   * Ignore maxItems and minItems for `array` types, preventing tuples being generated.
   */
  ignoreMinAndMaxItems: boolean
  /**
   * Append all index signatures with `| undefined` so that they are strictly typed.
   *
   * This is required to be compatible with `strictNullChecks`.
   */
  strictIndexSignatures: boolean
  /**
   * A [Prettier](https://prettier.io/docs/en/options.html) configuration.
   */
  style: PrettierOptions
  /**
   * Generate code for `definitions` that aren't referenced by the schema?
   */
  unreachableDefinitions: boolean
  /**
   * Generate unknown type instead of any
   */
  unknownAny: boolean
}

export const DEFAULT_OPTIONS: Options = {
  bannerComment: `/* tslint:disable */
/**
* This file was automatically generated by hyperschema-to-ts: DO NOT MODIFY IT BY HAND.
*/`,
  declareExternallyReferenced: true,
  enableConstEnums: false, // by default, avoid generating code
  ignoreMinAndMaxItems: false,
  strictIndexSignatures: false,
  style: {
    bracketSpacing: false,
    printWidth: 120,
    semi: true,
    singleQuote: false,
    tabWidth: 2,
    trailingComma: 'none',
    useTabs: false
  },
  unreachableDefinitions: false,
  unknownAny: true
}

export async function compile(url: RequestInfo, name: string, partialOptions: Partial<Options> = {}): Promise<string> {
  const options = merge({}, DEFAULT_OPTIONS, partialOptions)

  const res = await fetch(url)
  const body = await res.json()
  const normalized = normalize(body, name, options)

  console.log(3)
  const schema = await parser.dereference(normalized);

  const errors = validate(schema, name)
  if (errors.length) {
    errors.forEach(_ => error(_))
    throw new ValidationError()
  }

  console.log(1)
  const parsed = parse(schema!.definitions!.environment as any, options)
  parsed.standaloneName = name
  console.log(2)

  return format(generate(optimize(parsed), options), options)
}

export class ValidationError extends Error {}

;(async function () {
  try {
    const schema = await compile('http://site-api.lvh.me:3001/docs/site-api-hyperschema.json', 'SiteApiSchema')
    console.log(schema);
  } catch(e) {
    console.log(e);
  }
})()
